DROP TABLE BANINST1.Z_STU_ADVR_ZSADVR CASCADE CONSTRAINTS;

CREATE TABLE BANINST1.Z_STU_ADVR_ZSADVR
(
  ZSADVR_TERM_CODE           VARCHAR2(6 CHAR)   NOT NULL,
  ZSADVR_PIDM                NUMBER             NOT NULL,
  ZSADVR_ROLE_CODE           VARCHAR2(4 CHAR),
  ZSADVR_ADVISOR_CODE        VARCHAR2(4 CHAR),
  ZSADVR_ATTRIBUTE_CODE      VARCHAR2(4 CHAR),
  ZSADVR_MINOR_CODE          VARCHAR2(4 CHAR),
  ZSADVR_SCHOOL_CODE         VARCHAR2(2 CHAR),
  ZSADVR_PROGRAM_CODE        VARCHAR2(12 CHAR),
  ZSADVR_CONCENTRATION_CODE  VARCHAR2(4 CHAR),
  ZSADVR_ALPHABET_START      VARCHAR2(10 CHAR),
  ZSADVR_ALPHABET_END        VARCHAR2(10 CHAR),
  ZSADVR_CLASSHRS_START      NUMBER,
  ZSADVR_CLASSHRS_END        NUMBER,
  ZSADVR_ACTIVITY_DATE       DATE               NOT NULL,
  ZSADVR_ACTIVITY_PIDM       NUMBER             NOT NULL,
  ZSADVR_EGOL_CODE           VARCHAR2(2 CHAR),
  ZSADVR_SURROGATE_ID        NUMBER(19),
  ZSADVR_VERSION             NUMBER(19),
  ZSADVR_USER_ID             VARCHAR2(30 CHAR),
  ZSADVR_DATA_ORIGIN         VARCHAR2(30 CHAR),
  ZSADVR_VPDI_CODE           VARCHAR2(6 CHAR),
  ZSADVR_CAMPUS_CODE         VARCHAR2(3 CHAR),
  SUPPLEMENTAL LOG DATA (UNIQUE) COLUMNS,
  SUPPLEMENTAL LOG DATA (FOREIGN KEY) COLUMNS,
  SUPPLEMENTAL LOG DATA (PRIMARY KEY) COLUMNS
);

COMMENT ON TABLE BANINST1.Z_STU_ADVR_ZSADVR IS 'Advisor assignment rules by term';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_TERM_CODE IS 'Term code';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_PIDM IS 'Pidm of advisor';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_ROLE_CODE IS 'Primay (P) or Secondary (S) advisor role';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_ADVISOR_CODE IS 'Academic (A), (M), or blank advisor code';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_ATTRIBUTE_CODE IS 'Attribute code advisor is associated with';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_MINOR_CODE IS 'Minor code advisor is associated with';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_SCHOOL_CODE IS 'School/College code advisor is associated with';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_PROGRAM_CODE IS 'Program code advisor is associated with';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_CONCENTRATION_CODE IS 'Concentration code advisor is associated with';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_ALPHABET_START IS 'Start of advisor''s student last name responsibility';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_ALPHABET_END IS 'End of advisor''s student last name responsibility';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_CLASSHRS_START IS 'Start of advisor''s credit hour responsibility';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_CLASSHRS_END IS 'End of advisor''s credit hour responsibility';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_ACTIVITY_DATE IS 'Date of most recent activity';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_ACTIVITY_PIDM IS 'Pidm of person who performed most recent activity';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_SURROGATE_ID IS 'SURROGATE ID: Immutable unique key';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_VERSION IS 'VERSION: Optimistic lock token.';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_USER_ID IS 'USER ID: The user ID of the person who inserted or last updated this record.';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_DATA_ORIGIN IS 'DATA ORIGIN: Source system that created or updated the data.';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_VPDI_CODE IS 'VPDI CODE: Multi-entity processing code.';

COMMENT ON COLUMN BANINST1.Z_STU_ADVR_ZSADVR.ZSADVR_CAMPUS_CODE IS 'Campus Code associated with advisor.';


DROP SEQUENCE BANINST1.Z_STU_ADVR_ZSADVR_SURROGATE_ID_SEQUENCE;

CREATE SEQUENCE BANINST1.Z_STU_ADVR_ZSADVR_SURROGATE_ID_SEQUENCE
  START WITH 6801
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;


CREATE OR REPLACE TRIGGER BANINST1.Z_STU_ADVR_ZSADVR_SURROGATE_ID
    before insert or update on BANINST1.Z_STU_ADVR_ZSADVR
    for each row
begin
    if inserting then
        if :new.zsadvr_surrogate_id is null then
            :new.zsadvr_surrogate_id := Z_STU_ADVR_ZSADVR_SURROGATE_ID_SEQUENCE.nextVal();
        end if;
        :new.zsadvr_version := 0;
    else
        if :new.zsadvr_version = :old.zsadvr_version then
            :new.zsadvr_version := :old.zsadvr_version + 1;
        end if;
    end if;
end;
/


GRANT DELETE, INSERT, SELECT, UPDATE ON BANINST1.Z_STU_ADVR_ZSADVR TO BANGUIDGEN;

GRANT DELETE, INSERT, SELECT, UPDATE ON BANINST1.Z_STU_ADVR_ZSADVR TO BAN_DEFAULT_GUIDGEN_M;

GRANT DELETE, INSERT, SELECT, UPDATE ON BANINST1.Z_STU_ADVR_ZSADVR TO BAN_DEFAULT_PAGEBUILDER_M;

GRANT DELETE, INSERT, SELECT, UPDATE ON BANINST1.Z_STU_ADVR_ZSADVR TO USR_ADMIN_DEFAULT_M;

GRANT DELETE, INSERT, SELECT, UPDATE ON BANINST1.Z_STU_ADVR_ZSADVR TO USR_DEFAULT_GUIDGEN_M;

GRANT DELETE, INSERT, SELECT, UPDATE ON BANINST1.Z_STU_ADVR_ZSADVR TO USR_SS_DEFAULT_M;

GRANT READ ON BANINST1.Z_STU_ADVR_ZSADVR TO Z_KRISTI_SWAINSTON;

GRANT INSERT, UPDATE ON BANINST1.Z_STU_ADVR_ZSADVR TO Z_TREVOR_BENNETT;
